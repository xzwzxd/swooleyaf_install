user root;
#CPU个数的两倍
worker_processes 4;

error_log /home/logs/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid logs/nginx.pid;
google_perftools_profiles /tmp/tcmalloc;

events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    #收到一个新连接通知后接受尽可能多的连接
    multi_accept on;
    #单个后台worker process进程的最大并发链接数
    worker_connections 2048;
}

#worker进程的最大打开文件数限制
worker_rlimit_nofile 20480;

#安装推荐 https://segmentfault.com/a/1190000002797601
#配置参考 http://seanlook.com/2015/05/17/nginx-install-and-config/
#        https://imququ.com/post/my-nginx-conf.html
#        http://www.zhuxiaodong.net/2016/configure-nginx-server-support-https-http2-on-centos7/
#优化参考 https://www.cnblogs.com/suihui/p/3799683.html

# 内置变量
# $args 与请求行中的参数相等
# $arg_PARAMETER PARAMETER为具体的参数名,$arg_PARAMETER就表示获取具体的参数值
# $binary_remote_addr 二进制码形式的客户端地址
# $body_bytes_sent 传送页面的字节数
# $cookie_xxx COOKIE中字段xxx的值
# $content_length 请求头中的Content-Length字段
# $content_type 请求头中的Content-Type字段
# $document_root 当前请求在root指令中指定的值
# $document_uri 与$uri相同
# $host 请求中的主机头字段,如果请求中的主机头不可用,则为服务器处理请求的服务器名称
# $http_referer 用来记录从那个页面链接访问过来的
# $http_user_agent 记录客户浏览器的相关信息
# $http_x_forwarded_for 客户端ip地址
# $is_args 如果$args设置,值为"?",否则为""
# $limit_rate 限制的连接速率
# $nginx_version 当前运行的nginx版本号
# $query_string 与$args相同
# $remote_addr 客户端IP地址
# $remote_port 客户端端口
# $remote_user 已经经过Auth Basic Module验证的用户名
# $request 用来记录请求的url与http协议
# $request_method 这个变量是客户端请求的动作,通常为GET或POST包括0.8.20及之前的版本中,这个变量总为main request中的动作,如果当前请求是一个子请求,并不使用这个当前请求的动作
# $request_uri 这个变量等于包含一些客户端请求参数的原始URI,它无法修改,请查看$uri更改或重写URI
# $request_filename 当前连接请求的文件路径,由root或alias指令与URI请求生成
# $request_body 这个变量（0.7.58+）包含请求的主要信息在使用proxy_pass或fastcgi_pass指令的location中比较有意义
# $request_body_file 客户端请求主体信息的临时文件名
# $request_completion 未知
# $scheme 所用的协议,比如http或者是https,比如rewrite ^(.+)$ $scheme://example.com$1 redirect;
# $status 用来记录请求状态 成功是200
# $server_protocol 请求使用的协议,通常是HTTP/1.0或HTTP/1.1
# $server_addr 服务器地址,在完成一次系统调用后可以确定这个值,如果要绕开系统调用,则必须在listen中指定地址并且使用bind参数
# $server_name 服务器名称
# $server_port 请求到达服务器的端口号
# $time_local 用来记录访问时间与时区
# $uri 请求中的当前URI(不带请求参数,参数位于$args),可以不同于浏览器传递的$request_uri的值,它可以通过内部重定向,或者使用index指令进行修改

http {
    include mime.types;
    default_type application/octet-stream;
    charset utf-8;

    log_format main '$time_local $remote_addr $status $request_time $upstream_response_time - "$request" $body_bytes_sent "$http_referer" "$http_x_forwarded_for" "$http_user_agent"';
    log_format ssl '$time_local $remote_addr $status $request_time $upstream_response_time - "$request" $body_bytes_sent "$http_referer" "$http_x_forwarded_for" "$http_user_agent" $ssl_protocol $ssl_cipher $ssl_session_id $ssl_session_reused';

    sendfile on;
    #在一个数据包里发送所有头文件,而不一个接一个的发送
    tcp_nopush on;
    #关闭合并算法,缓存有数据就发送,不等待数据合并,在请求响应式服务中可提升响应速度
    tcp_nodelay on;

    #服务器将在这个超时时间过后关闭链接
    keepalive_timeout 60;
    #设置一个keep-alive连接上可以服务的请求的最大数量,当最大请求数量达到时,连接被关闭,默认是100
    keepalive_requests 5000;
    keepalive_disable msie6;

    #客户端请求头部的缓冲区大小,这个可以根据你的系统分页大小来设置,分页大小可以用命令getconf PAGESIZE
    #也有client_header_buffer_size超过4k的情况,client_header_buffer_size该值必须设置为"系统分页大小"的整倍数
    client_header_buffer_size 4k;
    large_client_header_buffers 4 4k;
    #缓冲区代理缓冲用户端请求的最大字节数
    client_body_buffer_size 128k;
    #设置请求头的超时时间
    client_header_timeout 10;
    #设置请求体的超时时间
    client_body_timeout 10;
    #客户端发送请求体最大大小
    client_max_body_size 20m;
    #关闭不响应的客户端连接,这将会释放那个客户端所占有的内存空间
    reset_timedout_connection on;
    #指定客户端的响应超时时间,在这段时间内客户端没有读取任何数据,nginx就会关闭连接
    send_timeout 30;

    #防止http proxy攻击
    fastcgi_param HTTP_PROXY "";

    gzip on;
    #指定的客户端禁用gzip功能,设置成IE6或者更低版本
    gzip_disable "MSIE [1-6].";
    #设置允许压缩的页面最小字节数
    gzip_min_length 1k;
    #设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流 例如 4 4k 代表以4k为单位,按照原始数据大小以4k为单位的4倍申请内存
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    #gzip压缩比/压缩级别,压缩级别 1-9,级别越高压缩率越大,当然压缩时间也就越长,默认值：1,保持默认即可,级别越高服务器压力越大,默认通常是够用的
    gzip_comp_level 1;
    #gzip压缩的文件mime类型
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    #Nginx作为反向代理的时候启用,决定后端服务器返回的结果是否压缩
    #匹配的前提是后端服务器必须要返回包含"Via"的 header头
    gzip_proxied any;
    #根据客户端的HTTP头来判断,是否需要压缩
    gzip_vary on;

    #关闭nginx版本信息
    server_tokens off;

    proxy_buffering on;
    #一次访问能写入的临时文件的大小
    proxy_temp_file_write_size 128k;
    #响应内容大于proxy_buffers指定的缓冲区时,写入硬盘的临时文件的大小
    #如果超过了这个值,Nginx将与Proxy服务器同步的传递内容而不再缓冲到硬盘
    #设置为0时,则直接关闭硬盘缓冲
    proxy_max_temp_file_size 4m;
    proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
    #缓存目录,不能设置在/tmp目录下
    proxy_cache_path /home/configs/nginx/cache/a01 levels=1:2 use_temp_path=off keys_zone=ngcachea01:16m inactive=3d max_size=64m;
    #缓冲文件目录,不能设置在/tmp目录下
    proxy_temp_path /home/configs/nginx/temp/a01 1 2;

    #lua配置
    lua_code_cache on;
    lua_package_path "/home/configs/nginx/lualib/?.lua";
    lua_package_cpath "/home/configs/nginx/lualib/?.so";
    lua_need_request_body on;
    #开启防御CC攻击必须设置
    lua_shared_dict sywafcachecc 10m;
    init_by_lua_file /home/configs/nginx/lualib/init.lua;
    limit_req_zone $cookie_sywaftoken zone=sywaftokens:10m rate=10r/s;
    #防火墙配置
    access_by_lua 'symodules.waf.checkWaf()';

    #只能定义在http作用域
    #名为allips,以$binary_remote_addr为key,10M内存大小,限制平均每秒的请求为20个
    #1M能存储16000个状态,rate的值必须为整数
    #如果限制两秒钟一个请求,可以设置成30r/m
    limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;

    #只能定义在http作用域
    #定义一个名为one,以$binary_remote_addr为key,10M内存大小的limit_zone来存储session
    limit_conn_zone one $binary_remote_addr 10m;

    #geo指令定义了一个白名单$limited变量,默认值为1,如果客户端ip在上面的范围内,$limited的值为0
    geo $limited {
        default 1;
        127.0.0.1/32 0;
        123.456.0.0/28 0;
    }

    #使用map指令映射搜索引擎客户端的ip为空串,如果不是搜索引擎就显示本身真实的ip
    #这样搜索引擎ip就不能存到limit_req_zone内存session中,所以不会限制搜索引擎的ip访问
    map $limited $allips {
        1 $binary_remote_addr;
        0 "";
    }

    upstream backend {
        zone backend 64k;
        #weight 指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况,后端服务器down掉,能自动剔除
        #ip_hash 每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session不能跨服务器的问题,后端服务器down掉,要手工down掉
        #fair 后端服务器的响应时间来分配请求,响应时间短的优先分配
        #url_hash 访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,后端服务器为缓存服务器时比较有效,不能写入weight等其他的参数
        #         hash $request_uri;
        #         hash_method crc32;
        #least_conn 请求会被转发到连接数最少的服务器
        least_conn;
        #down 表示当前的server暂时不参与负载
        #weight 默认为1,weight越大,负载的权重就越大
        #max_fails 允许请求失败的次数默认为1,当超过最大次数时,返回proxy_next_upstream模块定义的错误
        #fail_timeout max_fails次失败后,暂停的时间
        #backup 其它所有的非backup机器down或者忙的时候,请求backup机器,所以这台机器压力会最轻
        server 127.0.0.1:7100 weight=1 max_fails=3 fail_timeout=30;
        server 127.0.0.1:8100 weight=1 max_fails=3 fail_timeout=30;
        #每个worker和upstream保持的长连接数
        #10000QPS和100毫秒响应时间可以推算出的长连接数大概是1000,将keepalive设置为这个长连接数的10%到50%
        #当然不考虑资源消耗的话,直接设置为keepalive=1000也OK
        keepalive 500;
    }

    server {
        listen 80;
        server_name localhost;

        access_log /home/logs/nginx/localhost80.access.log main;

        #printf "jw:$(openssl passwd -crypt jw07061625)\n" > /home/configs/nginx/passwd/apidoc --openssl认证
        location / {
            root html;
            index index.html index.htm;
            #路由重写
            try_files $uri $uri/ /index.php$is_args$args;
            auth_basic "请输入用户名和密码";
            auth_basic_user_file /home/configs/nginx/passwd/apidoc;
        }

        location /ngx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        location /phpfpm_status {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
            fastcgi_param HTTPS on;
            fastcgi_param HTTP_SCHEME https;
            allow 127.0.0.1;
            deny all;
        }

        //微信校验文件匹配
        if ( $uri ~ ^/MP_verify_([0-9a-zA-z]+)\.txt$ ) {
            return 200 $1;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param HTTPS on;
            fastcgi_param HTTP_SCHEME https;
            include fastcgi_params;
        }
    }

    server {
        listen 8080;
        server_name localhost;
        root /home/jw;
        index index.php index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        #注:if和(之间必须要有空格隔开
        if ($request_method !~ ^(GET|HEAD|OPTIONS|POST)$) {
            return 444;
        }

        #https配置
        listen 8080 ssl http2 default_server;
        ssl on;
        # 密钥生成 openssl dhparam -out dhparam.pem 2048
        ssl_dhparam /xxx/dhparam.pem;
        ssl_certificate /xxx/server.crt;
        ssl_certificate_key /xxx/server.key;
        ssl_session_cache shared:SSL:5m;
        ssl_session_timeout 30m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES256-SHA384 ECDHE-RSA-AES128-SHA ECDHE-ECDSA-AES256-SHA384 ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA256 DHE-RSA-AES256-SHA ECDHE-ECDSA-DES-CBC3-SHA ECDHE-RSA-DES-CBC3-SHA EDH-RSA-DES-CBC3-SHA AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256 AES128-SHA AES256-SHA DES-CBC3-SHA !DSS';
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/cert/trustchain.crt;
        resolver 8.8.8.8 8.8.4.4 valid=300s;

        access_log /home/logs/nginx/localhost8080.access.log main;

        #路由重写,以下例子将路由 /search/abcde重写到/Index/Image/index?callback=dfasx&keyword=abcde,其中abcde为/search/后面的字符串
        rewrite ^/search\/([^\/]+?)(\/|$) /Index/Image/index?callback=dfasx&keyword=$1 permanent;
        #开放平台授权公众号消息路由重写
        rewrite ^/Index/WxOpen/handleAuthorizerNotify/([0-9a-zA-Z]+)$ /Index/WxOpen/handleAuthorizerNotify?appid=$1 permanent;

        location / {
            #burst-漏桶数
            #  如果第1,2,3,4秒请求为19个,第5秒的请求为25个是被允许的
            #  如果你第1秒就25个请求,第2秒超过20的请求返回503错误
            #nodelay
            #  不设置:严格使用平均速率限制请求数,第1秒25个请求时,5个请求放到第2秒执行
            #  设置:25个请求将在第1秒执行
            limit_req zone=allips burst=5 nodelay;

            #连接数限制,可定义在http server location作用域
            limit_conn one 20;
            #带宽限制,对单个连接限数,如果一个ip两个连接,就是500x2k
            limit_rate 500k;

            proxy_pass http://backend;
            proxy_redirect off;
            #忽略客户端中断
            proxy_ignore_client_abort on;
            #HTTP协议中对长连接的支持是从1.1版本之后才有
            proxy_http_version 1.1;
            #nginx跟后端服务器连接超时时间
            proxy_connect_timeout 10;
            #nginx读取后端服务器响应的超时时间
            proxy_read_timeout 10;
            #nginx发送后端服务器数据的超时时间
            proxy_send_timeout 30;
            #缓冲区,nginx针对单个连接缓存来自后端服务器的响应
            proxy_buffers 4 32k;
            #nginx从后端服务器读取并保存用户头信息的缓冲区大小
            proxy_buffer_size 4k;
            #高负荷下缓冲大小
            proxy_busy_buffers_size 64k;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-Port $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error invalid_header http_500 http_502 http_503 http_504;

            add_header Via "nginx";
        }
        #手动清理缓存
        location ~ /purge(/.*) {
            allow 127.0.0.1;
            allow 113.110.210.0/24;
            deny all;
            proxy_cache_purge ngcachea01 $host$1;
        }
        #动静分离,静态文件配置
        location ~ \.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ {
            root /home/jw/phpspace/swooleyaf/static;
            #设置nginx保存用户头信息的缓冲区大小
            proxy_buffer_size 4k;
            #缓冲区大小
            proxy_buffers 4 64k;
            #高负荷下缓冲大小(proxy_buffers*2)
            proxy_busy_buffers_size 128k;
            proxy_cache ngcachea01;
            proxy_cache_key $host$uri;
            proxy_cache_valid 200 304 302 15m;
            proxy_cache_valid any 5m;
            #当缓存过期后且开启了proxy_cache_revalidate,则会发出一次if-modified-since或if-none-match条件请求,如果后端返回304,则此时$upstream_cache_status为REVALIDATED,节省带宽和减少写磁盘的次数
            proxy_cache_revalidate on;
            #用于控制请求多少次后响应才被缓存
            proxy_cache_min_uses 3;
            #当多个客户端同时请求同一份内容时且开启proxy_cache_lock（默认off）,则只有一个请求被发送至后端,其他请求将等待第一个请求返回后,从缓存中获取内容返回
            proxy_cache_lock on;
            proxy_cache_lock_timeout 3s;
            #控制什么情况不使用缓存的内容,而是直接到后端获取最新的内容
            proxy_cache_bypass $http_pragma;
            add_header X-Cache $upstream_cache_status;
            add_header Cache-Control public,max-age=300;
            add_header Pragma public;
        }
        location ~ /\.ht {
            deny all;
        }
    }
}

#stream配置
stream {
    upstream backend2 {
        zone backend2 64k;
        least_conn;
        server 172.16.1.11:8081 weight=1 max_fails=3 fail_timeout=10s;
        server 172.16.1.22:8081 weight=1 max_fails=3 fail_timeout=10s;
    }
    server {
        listen 8081 so_keepalive=on;
        tcp_nodelay on;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass backend2;
    }
}
