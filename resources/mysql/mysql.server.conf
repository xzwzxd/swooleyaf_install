# ------------------- MySQL系统变量配置 -----------------------
# 设置方式:
# 进入mysql控制台: mysql -uxxx -pxxx
# 设置: set GLOBAL table_open_cache=4096;
# 查看: show variables like 'table_open_cache';
# 生效: flush privileges; --所有配置设置完成以后执行
# 注:每次mysql重启必须重新设置系统变量

# 所有线程所打开表的数量.
# 增加此值就增加了 mysqld 所需要的文件描述符的数量
# 这样你需要确认在 [mysqld_safe] 中 “open-files-limit” 变量设置打开文件数量允许至少等于 table_cache 的值
table_open_cache=4096

# 设定默认的事务隔离级别,可用的级别如下:
# READ-UNCOMMITTED: 幻读,不可重复读和脏读均允许
# READ-COMMITTED: 允许幻读和不可重复读,但不允许脏读
# REPEATABLE-READ: 允许幻读,但不允许不可重复读和脏读
# SERIALIZABLE: 幻读,不可重复读和脏读都不允许
# 脏读: 一个事务读取了另一个未提交的并行事务写的数据
# -- 事务T1更新了一行记录的内容,但是并没有提交所做的修改
#    事务T2读取更新后的行,然后T1执行回滚操作,取消了刚才所做的修改,现在T2所读取的行就无效了
# 不可重复读: 一个事务重新读取前面读取过的数据,发现该数据已经被另一个已提交的事务修改过
# -- 事务T1读取一行记录,紧接着事务T2修改了T1刚才读取的那一行记录
#    然后T1又再次读取这行记录,发现与刚才读取的结果不同
# 幻读: 一个事务重新执行一个查询，返回一套符合查询条件的行，发现这些行因为其他最近提交的事务而发生了改变。
# -- 事务T1读取一条指定的WHERE子句所返回的结果集
#    然后事务T2新插入一行记录,这行记录恰好可以满足T1所使用的查询条件中的WHERE子句的条件
#    然后T1又使用相同的查询再次对表进行检索,但是此时却看到了事务T2刚才插入的新行
tx_isolation='READ-COMMITTED'

# 保存主从同步信息到数据表中(从库配置)
relay_log_info_repository=TABLE

# 仅仅允许使用键值的 UPDATEs 和 DELETEs
sql_safe_updates=1